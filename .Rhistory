# 6. Definir as cores
cores_faixas <- c(
"> 0 e <= 100" = "#a4d2c9",
"> 100 e < 300" = "#e1d064",
">= 300" = "#d16464",
"Sem dados registrados" = "white"
)
# 7. Verificar número de municípios por faixa
mapa_categ %>%
count(faixa_incidencia)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "gray80", size = 0.2) +
scale_fill_manual(
values = cores_faixas,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
tabela_classif <- base_pb %>%
mutate(
NM_MUN = str_to_upper(Munic_Resid),
CLASSI_FIN = as.character(CLASSI_FIN)  # garantir que seja string
) %>%
count(NM_MUN, CLASSI_FIN) %>%
pivot_wider(
names_from = CLASSI_FIN,
values_from = n,
values_fill = 0
)
View(tabela_classif)
write_xlsx(tabela_classif, "Classificação.xlsx")
# 1. Base com todos os municípios (nome padronizado)
todos_munic <- mapa_pb %>%
st_drop_geometry() %>%
mutate(NM_MUN = str_to_upper(NM_MUN)) %>%
select(NM_MUN) %>%
distinct()
# 2. Resumo de casos por município e classificação
classif_munic <- base_pb %>%
mutate(
NM_MUN = str_to_upper(Munic_Resid),
CLASSI_FIN = as.character(CLASSI_FIN)
) %>%
count(NM_MUN, CLASSI_FIN)
# 3. Cruzar com todos os municípios (mantém os 223)
tabela_classif_completa <- todos_munic %>%
left_join(classif_munic, by = "NM_MUN") %>%
pivot_wider(
names_from = CLASSI_FIN,
values_from = n,
values_fill = 0
)
View(todos_munic)
View(tabela_classif_completa)
write_xlsx(tabela_classif, "Classificação.xlsx")
write_xlsx(tabela_classif, "Classificação.xlsx")
write_xlsx(tabela_classif_completa, "Classificação.xlsx")
install.packages("extrafont")
library(extrafont)
# Importa as fontes do sistema
font_import(prompt = FALSE)
loadfonts(device = "win")  # ou "pdf" para salvar em PDF
# Cria o gráfico com Times New Roman
ggplot(controle_zika, aes(x = Semana)) +
geom_ribbon(aes(ymin = LIC, ymax = LSC, fill = "Zona de controle"), alpha = 0.2, show.legend = TRUE) +
geom_line(aes(y = media, color = "Média histórica"), linetype = "dashed", size = 1) +
geom_line(aes(y = Casos_2024, color = "Casos 2024"), size = 1.2) +
scale_x_continuous(breaks = 1:53) +
scale_color_manual(
name = "Linhas",
values = c("Casos 2024" = "red", "Média histórica" = "black")
) +
scale_fill_manual(
name = "Faixa",
values = c("Zona de controle" = "grey70")
) +
labs(
title = "Diagrama de Controle dos Casos de Zika - Paraíba, 2024",
x = "Semana Epidemiológica",
y = "Número de Casos",
caption = "Fonte: Elaboração própria. LSC = Limite Superior de Controle; LIC = Limite Inferior de Controle"
) +
theme_minimal(base_family = "Times New Roman") +  # <-- Aqui está a mágica
theme(
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(color = "black"),
axis.text.x = element_text(angle = 90, size = 8),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
plot.caption = element_text(size = 10, hjust = 1),
legend.position = "top",
legend.title = element_text(face = "bold")
)
install.packages("extrafont")
# 1. Carregar o shapefile
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Filtrar apenas os CASOS PROVÁVEIS (excluir descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 3. Carregar base populacional e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024.xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 4. Juntar casos e população e calcular incidência
dados_inc <- casos_provaveis %>%
left_join(pop_munic, by = "NM_MUN") %>%
mutate(
Incidencia_100k = round((casos_provaveis / populacao) * 100000, 2)
)
# 5. Juntar com shapefile e classificar por faixas de incidência
mapa_categ <- mapa_pb %>%
left_join(dados_inc, by = "NM_MUN") %>%
mutate(
faixa_incidencia = case_when(
is.na(Incidencia_100k) ~ "Sem dados registrados",
Incidencia_100k > 0 & Incidencia_100k <= 100 ~ "> 0 e <= 100",
Incidencia_100k > 100 & Incidencia_100k < 300 ~ "> 100 e < 300",
Incidencia_100k >= 300 ~ ">= 300",
TRUE ~ "Sem dados registrados"
)
)
# 6. Definir as cores
cores_faixas <- c(
"> 0 e <= 100" = "#a4d2c9",
"> 100 e < 300" = "#e1d064",
">= 300" = "#d16464",
"Sem dados registrados" = "white"
)
# 7. Verificar número de municípios por faixa
mapa_categ %>%
count(faixa_incidencia)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "gray80", size = 0.2) +
scale_fill_manual(
values = cores_faixas,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Filtrar apenas os CASOS PROVÁVEIS (excluir descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 3. Carregar base populacional e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024.xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 4. Juntar casos e população e calcular incidência
dados_inc <- casos_provaveis %>%
left_join(pop_munic, by = "NM_MUN") %>%
mutate(
Incidencia_100k = round((casos_provaveis / populacao) * 100000, 2)
)
# 5. Juntar com shapefile e classificar por faixas de incidência
mapa_categ <- mapa_pb %>%
left_join(dados_inc, by = "NM_MUN") %>%
mutate(
faixa_incidencia = case_when(
is.na(Incidencia_100k) ~ "Sem dados registrados",
Incidencia_100k > 0 & Incidencia_100k <= 100 ~ "> 0 e <= 100",
Incidencia_100k > 100 & Incidencia_100k <= 300 ~ "> 100 e <= 300",
Incidencia_100k >= 300 ~ ">= 300",
TRUE ~ "Sem dados registrados"
)
)
# 6. Definir as cores
cores_faixas <- c(
"> 0 e <= 100" = "#a4d2c9",
"> 100 e < 300" = "#e1d064",
">= 300" = "#d16464",
"Sem dados registrados" = "white"
)
# 7. Verificar número de municípios por faixa
mapa_categ %>%
count(faixa_incidencia)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "black", size = 0.2) +
scale_fill_manual(
values = cores_faixas,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Filtrar apenas os CASOS PROVÁVEIS (excluir descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 3. Carregar base populacional e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024.xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 4. Juntar casos e população e calcular incidência
dados_inc <- casos_provaveis %>%
left_join(pop_munic, by = "NM_MUN") %>%
mutate(
Incidencia_100k = round((casos_provaveis / populacao) * 100000, 2)
)
# 5. Juntar com shapefile e classificar por faixas de incidência
mapa_categ <- mapa_pb %>%
left_join(dados_inc, by = "NM_MUN") %>%
mutate(
faixa_incidencia = case_when(
is.na(Incidencia_100k) ~ "Sem dados registrados",
Incidencia_100k > 0 & Incidencia_100k <= 100 ~ "> 0 e <= 100",
Incidencia_100k > 100 & Incidencia_100k <= 300 ~ "> 100 e <= 300",
Incidencia_100k >= 301 ~ ">= 301",
TRUE ~ "Sem dados registrados"
)
)
# 6. Definir as cores
cores_faixas <- c(
"> 0 e <= 100" = "#a4d2c9",
"> 100 e < 300" = "#e1d064",
">= 300" = "#d16464",
"Sem dados registrados" = "white"
)
# 7. Verificar número de municípios por faixa
mapa_categ %>%
count(faixa_incidencia)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "black", size = 0.2) +
scale_fill_manual(
values = cores_faixas,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
# 1. Carregar o shapefile
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Filtrar apenas os CASOS PROVÁVEIS (excluir descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 3. Carregar base populacional e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024.xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 4. Juntar casos e população e calcular incidência
dados_inc <- casos_provaveis %>%
left_join(pop_munic, by = "NM_MUN") %>%
mutate(
Incidencia_100k = round((casos_provaveis / populacao) * 100000, 2)
)
# 5. Juntar com shapefile e classificar por faixas de incidência
mapa_categ <- mapa_pb %>%
left_join(dados_inc, by = "NM_MUN") %>%
mutate(
faixa_incidencia = case_when(
is.na(Incidencia_100k) ~ "Sem dados registrados",
Incidencia_100k > 0 & Incidencia_100k <= 100 ~ "> 0 e <= 100",
Incidencia_100k > 100 & Incidencia_100k < 300 ~ "> 100 e < 300",
Incidencia_100k >= 300 ~ ">= 300",
TRUE ~ "Sem dados registrados"
)
)
# 6. Definir as cores
cores_faixas <- c(
"> 0 e <= 100" = "#a4d2c9",
"> 100 e < 300" = "#e1d064",
">= 300" = "#d16464",
"Sem dados registrados" = "white"
)
# 7. Verificar número de municípios por faixa
mapa_categ %>%
count(faixa_incidencia)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "black", size = 0.2) +
scale_fill_manual(
values = cores_faixas,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
# Carregar pacotes
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(stringr)
# 1. Carregar o shapefile dos municípios da PB
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Base com todos os municípios (223)
todos_munic <- mapa_pb %>%
st_drop_geometry() %>%
select(NM_MUN) %>%
distinct()
# 3. Filtrar apenas os casos PROVÁVEIS (excluindo descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO", "2")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 4. Carregar população e padronizar
pop_munic <- read.csv("Dados/populacao_municipios_pb_2024.csv") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
# 1. Ler shapefile dos municípios
library(dplyr)
library(sf)
library(stringr)
library(ggplot2)
# Carregar pacotes
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(stringr)
# 1. Carregar o shapefile dos municípios da PB
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Base com todos os municípios (223)
todos_munic <- mapa_pb %>%
st_drop_geometry() %>%
select(NM_MUN) %>%
distinct()
# 3. Filtrar apenas os casos PROVÁVEIS (excluindo descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO", "2")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 4. Carregar população e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024_xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
library(sf)
library(dplyr)
library(stringr)
library(ggplot2)
# 1. Ler shapefile dos municípios
library(dplyr)
library(sf)
library(stringr)
library(ggplot2)
# Carregar pacotes
library(dplyr)
library(tidyr)
library(sf)
library(ggplot2)
library(stringr)
# 1. Carregar o shapefile dos municípios da PB
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Base com todos os municípios (223)
todos_munic <- mapa_pb %>%
st_drop_geometry() %>%
select(NM_MUN) %>%
distinct()
# 3. Filtrar apenas os casos PROVÁVEIS (excluindo descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO", "2")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 4. Carregar população e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024_xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
mapa_pb <- read_sf("Dados/PB_Municipios_2024/PB_Municipios_2024.shp") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 2. Base com todos os municípios (223)
todos_munic <- mapa_pb %>%
st_drop_geometry() %>%
select(NM_MUN) %>%
distinct()
# 3. Filtrar apenas os casos PROVÁVEIS (excluindo descartados)
casos_provaveis <- base_pb %>%
filter(!str_to_upper(CLASSI_FIN) %in% c("DESCARTADO", "2")) %>%
mutate(NM_MUN = str_to_upper(Munic_Resid)) %>%
count(NM_MUN, name = "casos_provaveis")
# 4. Carregar população e padronizar
pop_munic <- read_xlsx("Dados/populacao_municipios_pb_2024.xlsx") %>%
mutate(NM_MUN = str_to_upper(NM_MUN))
# 5. Unir população + casos e calcular incidência
dados_inc <- todos_munic %>%
left_join(casos_provaveis, by = "NM_MUN") %>%
left_join(pop_munic, by = "NM_MUN") %>%
mutate(
casos_provaveis = replace_na(casos_provaveis, 0),
Incidencia_100k = round((casos_provaveis / populacao) * 100000, 2)
)
# 6. Unir com o mapa e classificar em faixas
mapa_categ <- mapa_pb %>%
left_join(dados_inc, by = "NM_MUN") %>%
mutate(
faixa_incidencia = case_when(
is.na(Incidencia_100k) ~ "Sem dados registrados",
Incidencia_100k > 0 & Incidencia_100k <= 100 ~ "> 0 e <= 100",
Incidencia_100k > 100 & Incidencia_100k <= 300 ~ "> 100 e <= 300",
Incidencia_100k > 300 & Incidencia_100k <= 600 ~ "> 300 e <= 600",
Incidencia_100k > 600 ~ "> 600",
TRUE ~ "Sem dados registrados"
)
)
# 7. Definir as cores conforme sua legenda da imagem
cores_mapa_legenda <- c(
"> 0 e <= 100" = "#d4e79f",     # verde claro
"> 100 e <= 300" = "#f7c442",   # amarelo
"> 300 e <= 600" = "#f78c3d",   # laranja médio
"> 600" = "#d7301f",            # vermelho forte
"Sem dados registrados" = "white"
)
# 8. Plotar o mapa
ggplot(mapa_categ) +
geom_sf(aes(fill = faixa_incidencia), color = "gray80", size = 0.2) +
scale_fill_manual(
values = cores_mapa_legenda,
name = "Incidência por 100 mil"
) +
labs(title = "Incidência de casos prováveis de Zika por município - PB, 2024") +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(
hjust = 0.5,
face = "bold",
size = 14,
family = "Times New Roman"
),
legend.title = element_text(family = "Times New Roman"),
legend.text = element_text(family = "Times New Roman"),
axis.title = element_text(family = "Times New Roman"),
axis.text = element_text(family = "Times New Roman")
)
install.packages("extrafont")
library(extrafont)
# Importa as fontes do sistema
font_import(prompt = FALSE)
